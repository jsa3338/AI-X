7장. 객체지향 프로그래밍

1절. 객체와 클래스
	클래스는 설계도, 객체는 그 설계도의 결과물
	class 클래스명(상속받을 클래스명):
		변수나 함수들 선언

2절. 생성자와 소멸자
	생성자는 __init__(self, 매개변수,...) < - 객체가 생성될때 자동 실행, 초기화
	소멸자는 __del__(self)   < - 객체가 소멸될 때(레퍼런스 카운트가 0) 자동 실행

3절. 변수와 메소드(함수)
	메소드는 클래스에서 선언된 함수를 일컫는다.
	인스턴스변수 vs 클래스변수 vs 정적(static)변수
	  - 인스턴스 변수 : 인스턴스 함수 내에 선언된 변수
	  - 클래스 변수 : 클래스 내에 선언된 변수로서, 모든 객에체 동일 값이 부여
	  - 정적 변수 : 여러 객체들 사이에 데이터를 공유하고 싶을 때 사용. __변수명
	인스턴스메소드 vs 클래스매소드vs 정적(static)메소드
	  - 인스턴스 메소드(self) : 첫번째 인자에 self를 꼭 명시. 객체를 통해서만 호출할 수 있는 메소드
	  - 클래스 메소드(clz) : 메소드 위에 @classmethod를 선언한 메소드. 첫번째 인자에 cls(clz) 꼭 명시
	  - static 메소드() : 메소드 위에 @staticmethod를 선언한 메소드. 인자를 넣지 않음
	
<사용 예시>
    class 클래스명:
        '독스트링'
        클래스변수명 = 값
        def __init__(self, [객체멤버를 초기화할 변수=값], ...):
            self.인스턴스(일반)변수 = 값
            객체를 생성할 때 객체 멤버 변수의 초기 설정

       def method(self):
           인스턴스 메소드(일반함수)의 매개변수는 self를 반드시 포함
       @classmethod(cls):
           코드
       @staticmethod
       def staticmethod():
           코드
    객체변수 = 클래스명()
    객체변수.method()
    클래스명.classmethod()
    클래스명.staticmethod()
    클래스명._클래스명__정적변수

4절. 상속과 재정의
	기존 클래스와 유사하지만 변형이 필요할 때, 부모 클래스의 모든 속성을 자식클래스로 상속받을 수 있다. 
	전체를 상속받으나 다시 세팅이 가능하다. 이걸 오버라이딩이라고 한다. (like __str__)
	문법 : class 자식클래스명(부모클래스명):