10장. N차원 배열 다루기
 - 그 중 numpy 패키지의 많은 함수들을 활용하므로 집중해서 보자
 - 배열은 반드시 동일 자료형의 집합이다
 - numpy 패키지 계열은 실행시 
   결과를 출력하면 값이 저장되는 함수가 아니고, 
   결과 출력이 안되면 값을 저장하는 함수다

[Numpy 패키지 함수와 속성]

<배열속성>
 dtype : 요소들의 type
 itemsize : 한 요소의 byte 사이즈
 ndim : 차원수(축수)
 size : 배열 요소의 (총)개수
 shape : 배열 구조 # ex. (2, 3)  2행 3열

<배열 생성 함수 np.>
  np.array(obj, dtype, copy=T) 
  np.array(obj, dtype, copy=T).reshape(구조) 
	# obj -> 리스트, 튜플, 배열
  np.ones(tup,dtype)
  np.zeros(tup,dtype)
  np.full(tup, 기본값)
  np.empty(tup, dtype)
  np.random.random(tup) : 0~1미만 균등분포된 랜덤값
  np.random.uinform(low=0, high=1.0, size=tup) : low~high미만 균등분포된 랜덤값
  np.random.normal(loc=0, scale=1.0, size=tup) : 평균loc, 표준편차scale의 정규분포를 갖는 랜덤값
  np.random.rand(n) : n개의 균등분포의 1차원 랜덤값 배열
  np.random.randn(n) : n개의 표준정규분포의 1차원 랜덤값 배열
  np.linspace(from, to, count, dtype) : from 부터 to(포함)까지 count개 1차원 배열
  np.arange(from, stop, step) : from부터 stop앞까지 step 증감하는 1차원 배열

<배열 차원 변경>
  reshape([면수,] 행수,열수) : -1 사용하면 자동 계산
  resize(tup) : -1 사용 불가
  ravel(), flatten() : 1차원 변경
  transpose(), T : 전치행렬
  ary[:, np.newaxis] , np.expand_dims(ary, axis=1) 차원 증가
  
<배열연산>
 - 요소별 연산 -> + - *  등 
    ㄴ 브로드캐스팅 : 부족한 행이나 열을 임의로 채워서 계산 
 - 행렬연산(2차원) @(dot함수), 단위행렬(정방행렬)
 - 범용함수 np.add(), np.multiply(), np.substract(), np.sqrt()

<배열 합치기>
  np.vstack(tup)
  np.hstack(tup)
  np.dstack(tup) : 마지막 축(열)들끼리 합침

  np.column_stack(tup) : 1차원 배열을 열단위로 배열하여 2차원으로 합침
  np.row_stack(tup) : 행단위로 합침
  np.stack(tup, axis)

  np.r_[a, b, ...] : row 단위로 쌓음
  np.c_[a, b, ...] : 컬럼으로 쌓아서 합침

<배열 분리하기>
 np.vsplit(ary, 정수나 인덱스벡터) == np.split(ary, 정수나 인덱스벡터, axis=0)
 np.hsplit(ary, 정수나 인덱스벡터) == np.split(ary, 정수나 인덱스벡터, axis=1)
 np.dsplit(ary, 정수나 인덱스벡터) == np.split(ary, 정수나 인덱스벡터, axis=2) 혹은 axis = -1
 np.array_split(ary, 정수나 인덱스벡터, axis) : 나눠지지 않는 정수로도 분리 가능














